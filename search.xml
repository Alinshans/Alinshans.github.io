<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C++之那些年踩过的坑(二)]]></title>
    <url>%2F2017%2F05%2F23%2Fp1705231%2F</url>
    <content type="text"><![CDATA[注：本文来自于我的一篇博客 http://www.cnblogs.com/GodA/p/6554591.html ，修改而成。 这一篇将会聊聊C++中一个极具迷惑性的关键字 ———— inline。虽然只是一个小小的关键字，但要是没有真正了解它，也是很容易踩坑的。 一、什么是 inline或许你对它有那么一点点熟悉，但是又说不清。它的中文翻译为“内联”。它经常跟一个东西共同出现，称为“内联函数(inline function)”。正是这样的翻译，对新手产生了太多的误会。那么什么是 inline 呢？现在暂时不做解答。接下来你可能会经常用到 cppreference，所以你可以先点开放到一旁，然后我们进入正题。 二、inline 之初印象上网搜一下，C++ inline 的作用，你看到的都是什么？都是说 inline 函数可以自动把函数展开呀，可以减小函数调用的开销呀……还会好心提醒你，太大的函数不宜用 inline 呀！会导致代码膨胀呀！只有那些短小精悍的、经常调用的函数使用 inline 才能看到非常明显的效果呀…………我在 N 年前，也是这么傻傻的，所以看到短函数就想加 inline，唯恐性能变差。于是，在印象里，inline 就跟优化挂上钩了。 三、inline 之初体验我们先从简单的例子开始，新建一个 main.cpp 源文件：123456789101112#include &lt;iostream&gt;int max(int a, int b)&#123; return a &lt; b ? b : a;&#125;int main()&#123; int res = max(1, 2); std::cout &lt;&lt; res &lt;&lt; "\n";&#125; 我们编译运行，好，通过了。看到这个函数手痒了是吧，好我们给它加上 inline，再次编译运行，也通过了。到这里还没有问题，具体它的优化我们暂时不去分析。我们要养成一个工程习惯嘛！这是个简单的例子，但实际中我们写的代码可能很多，可能有很多很多个类似于 max 这样的函数，于是我们就想着把他们区分开，于是我们又创建了一个 a.h 头文件，把 max 扔进去，我们还想着接口与实现分离，于是我们创建一个 a.cpp 源文件来实现函数的定义，文件结构变成了这样：12// a.hint max(int a, int b); 1234567// a.cpp#include "a.h"int max(int a, int b)&#123; return a &lt; b ? b : a;&#125; 12345678910// main.cpp#include &lt;iostream&gt;#include "a.h"int main()&#123; int res = max(1, 2); std::cout &lt;&lt; res &lt;&lt; "\n";&#125; 我们运行一遍，没有问题，然后我们试着给 max 函数加上 inline，你知道，Ⅰ.inline 要跟函数的定义放在一块，所以我们就要在 a.cpp 给它加上：1inline int max(int a, int b)&#123;...&#125; 我们再次编译运行，WTF！！怎么报错了！！不就加了个 inline 吗？！！ 冷静了一会，我们看看报错信息，如果你用的是 VS，那么你大概会看到这样的提示： 1&gt;main.obj : error LNK2019: 无法解析的外部符号 &quot;int __cdecl max(int,int)&quot; (?max@@YAHHH@Z)，该符号在函数 _main 中被引用 1&gt;C:\Users\Alinshans\documents\visual studio 2017\Projects\test\Debug\test.exe : fatal error LNK1120: 1 个无法解析的外部命令 是不是感觉有点熟悉？似曾相识？如果你用的是 G++ 去编译，那么大概会得到这样的提示： main.cpp:(.text+0x13): undefined reference to `max(int, int)&apos; 要是你对C/C++编译的过程有一点点了解的话，我们继续尝试用 G++ 去分别运行下面的命令：12$ g++ -c main.cpp$ g++ main.o -o a.out 你就会发现，运行第一条命令（编译）时，是没有错的，运行第二条命令（链接）时，就报错了。这里说明一下，大多数的建置环境都是在编译过程进行 inlining（为了替换函数调用，编译器需要知道函数的实体长什么样，这就解释了 Ⅰ），某些可以在连接期完成，少数的可以在运行期完成。我们只考虑绝大部分情况：inlining 在大多数C++程序中是编译期行为。好了，我们讲回来，为什么会出现这个链接错误呢？注意到刚刚打开的网页 这里的第二、三条 ： 2) The definition of an inline function or variable (since C++17) must be present in the translation unit where it is accessed (not necessarily before the point of access).3) An inline function or variable (since C++17) with external linkage (e.g. not declared static) has the following additional properties: 1) It must be declared inline in every translation unit. 2) It has the same address in every translation unit. 这里提到了 external linkage，若想详细了解可以看 这里。嫌太长不看的你只需要知道我们定义的 max 函数，具有 external linkage，那么它就要满足： 在你需要引用它的编译单元可见 在每个编译单元都要声明为 inline 用人话讲就是，你要把这个 inline function 的定义放到每一个你需要引用的 .cpp(.cc/.cxx等) 源文件。也就是说你要把 main.cpp 写成这样：123456789101112131415// main.cpp#include &lt;iostream&gt;#include "a.h"inline int max(int a, int b)&#123; return a &lt; b ? b : a;&#125;int main()&#123; int res = max(1, 2); std::cout &lt;&lt; res &lt;&lt; "\n";&#125; 好了，这下就没问题了，可以编译通过了。但是，这就需要我们把在源文件内声明为 inline 的函数，复制到每一个需要引用的单元，这样可不好看。所以，一般情况下，Ⅱ. inline 函数的定义放在头文件中，而不放在源文件中。 四、inline 之再体验经过刚刚的了解，我们就试一试在头文件中给函数加上或不加上 inline 的区别吧！我们在 a.h 中新增一个函数：1234567// a.hint max(int a, int b);inline int min(int a, int b)&#123; return a &lt; b ? a : b;&#125; 好，a.cpp 文件依然没有变：1234567// a.cpp#include "a.h"inline int max(int a, int b)&#123; return a &lt; b ? b : a;&#125; 在 main.cpp 中引用这个 min 函数：12345678910111213141516// main.cpp#include &lt;iostream&gt;#include "a.h"inline int max(int a, int b)&#123; return a &lt; b ? b : a;&#125;int main()&#123; int res = max(1, 2); int res2 = min(1, 2); std::cout &lt;&lt; res &lt;&lt; " " &lt;&lt; res2 &lt;&lt; "\n";&#125; 好我们编译运行一下，很好通过了，没有什么问题。我们试试看去掉 inline 会有什么区别吧！WTF!!!怎么又报错了！？？这次又是什么鬼！？这一次，VS的提示是： 1&gt;main.obj : error LNK2005: &quot;int __cdecl min(int,int)&quot; (?min@@YAHHH@Z) 已经在 a.obj 中定义 1&gt;C:\Users\Alinshans\documents\visual studio 2017\Projects\test\Debug\test.exe : fatal error LNK1169: 找到一个或多个多重定义的符号 是不是感觉也似曾相识？（注意，若使用G++编译运行时，可能没有报错，并且正常运行，但这不是值得侥幸的）我们稍微思考一下就能想明白：在 a.h 中定义了 min 这个函数，而在 main.cpp 中，又 #include 了 a.h 这个文件，其中 a.cpp 这个编译单元在生成 a.obj 时会为 min 生成一个实体，而 main.cpp 又为 min 生成了一个实体，所以就会出现重定义。那为什么我们使用 inline 时，就不会有这个错误呢？ 五、什么时候应该使用 inline我们还是翻到刚刚的链接，看到 第一条： 1) There may be more than one definition of an inline function or variable (since C++17) in the program as long as each definition appears in a different translation unit and (for non-static inline functions and variables (since C++17)) all definitions are identical. For example, an inline function or an inline variable (since C++17) may be defined in a header file that is #include’d in multiple source files. 用人话说就是声明为 inline 的函数可以在多个编译单元中重复定义，且只会为它们生成一份实体。刚刚我们在 a.h 内定义的函数，就必须要加上 inline 声明（或者static也是可以的，这里不展开了）。所以，Ⅲ. 当且仅当函数定义在头文件且有可能被多个源文件包含时，使用 inline 。 六、inline 与类成员函数、模板这个部分应该也是很让新手纠结的。因为一个类，可能会有很多 getter/setter 之类的短小的函数，于是就会去纠结要不要加 inline。同时类的成员函数定义的位置，也有以下三种（假设类的声明在 a.h，定义在 a.cpp）： 在头文件中，定义在类中 在头文件中，定义在类外 在源文件中 我们一个一个来谈谈。首先是定义在类中的，需不需要加 inline 呢？还是看到刚刚的页面，最上面这里： A function defined entirely inside a class/struct/union definition, whether it’s a member function or a non-member friend function, is implicitly an inline function. 定义在类中的函数，是隐式 inline 的，所以不需要你加 inline，而且，LLVM CodingStandards 也是这样提出的： Don’t use inline when defining a function in a class definition 我们再讲讲定义在源文件中的，要是你认真看过本文，你就会知道，前面说了，不要把 inline 函数定义在源文件中，所以如果你类成员函数定义在了源文件中，也不需要加 inline。剩下一个，其实我想不到什么理由，可以让成员函数既不定义在类内，也不定义在源文件中（模板类成员函数/类模板成员函数除外）。如果成员函数比较短小，那么你就可以直接定义在类内，否则可以定义在源文件中。而要是非得要定义在头文件且在类外，那就必须要声明为 inline，否则也会有一个重定义的错误。但为什么不直接定义在类中呢？所以综上所述，Ⅳ. 不要把 inline用于类成员函数。 然后再讲模板，包括了函数模板、类模板成员函数和模板类成员函数。有点晕是吧，反正就是有带模板的函数。这些函数具有 inline 语义，是自带 inline 属性的。也就是说，你把刚刚的那个 a.h 文件里的 min 函数改成模板：12345template &lt;typename T&gt;T min(T a, T b)&#123; return a &lt; b ? a : b;&#125; 不需要加上 inline，也是可以正常运行的。所以，Ⅴ. 模板不需要声明为 inline，也具有 inline 的语义。 七、inline 与优化刚刚说了 inline 的用法，现在终于到了要摧毁印象的时候了。我们就先用 main.cpp 来测试：1234567891011121314// main.cpp#include &lt;iostream&gt;#include &lt;cstdio&gt;inline int max(int a, int b)&#123; return a &lt; b ? b : a;&#125;int main()&#123; int res = max(1, 2); std::printf("%d\n", res);&#125; 现在，max 函数是声明为 inline 的，我们可以看反汇编代码，来看看 max 是否有调用。使用 GCC，可以分别运行以下三条命令：123$ g++ -E main.cpp -o main.i$ g++ -S main.i -o main.s$ g++ -O2 -S main.i -o main2.s 然后 main.s 和 main2.s 就是分别未使用优化和 使用了O2优化后的反汇编代码。在 VS 下看反汇编就非常简单了，随便设置一个断点，然后点调试-&gt;开始调试，等程序运行后，点调试-&gt;窗口-&gt;反汇编，就可以看到反汇编代码了。因为 VS 的反汇编的代码比较清晰好看，所以就以 VS 中的反汇编为例。我们先在 Debug 模式下，查看反汇编代码（主要部分）：123456789101112 int res = max(1, 2);002218AE push 2 002218B0 push 1 002218B2 call max (02212BCh) 002218B7 add esp,8 002218BA mov dword ptr [res],eax std::printf(&quot;%d\n&quot;, res);002218BD mov eax,dword ptr [res] 002218C0 push eax 002218C1 push offset string &quot;%d\n&quot; (0227B30h) 002218C6 call _printf (022132Fh) 002218CB add esp,8 我们可以看到，是有调用 max 函数的。我们再切换到 Release 模式，查看反汇编代码：12345678 int res = max(1, 2); std::printf(&quot;%d\n&quot;, res);00131040 push 2 00131042 push offset string &quot;%d\n&quot; (01320F8h) int res = max(1, 2); std::printf(&quot;%d\n&quot;, res);00131047 call printf (0131010h) 0013104C add esp,8 是的，max 函数的调用已经不见了，不过你认为这是拜你加上的 inline 所赐的吗？我们去掉 inline ，再重复一遍刚刚的过程，你会发现，结果是一模一样的。你没有死心，说，这个函数太简单了，我是编译器我也能看得出来怎么优化，要是函数复杂一点，比如有循环、递归什么的，编译器就不会自动优化了！那好吧，我们把 main.cpp 改成这样：1234567891011121314151617#include &lt;iostream&gt;#include &lt;cstdio&gt;int test(int i)&#123; int x = 0; for (int j = 0; j &lt; i; ++j) &#123; x += j; &#125; return x;&#125;int main()&#123; std::printf("%d\n", test(100));&#125; 在 Debug 下反汇编：12345678 std::printf(&quot;%d\n&quot;, test(100));010118AE push 64h 010118B0 call test (0101136Bh) 010118B5 add esp,4 010118B8 push eax 010118B9 push offset string &quot;%d\n&quot; (01017B30h) 010118BE call _printf (0101132Fh) 010118C3 add esp,8 在 Release 下反汇编：12345678910111213141516171819202122232425 std::printf(&quot;%d\n&quot;, test(100));00F31042 xor ecx,ecx 00F31044 xor eax,eax std::printf(&quot;%d\n&quot;, test(100));00F31046 xor edx,edx 00F31048 xor esi,esi 00F3104A xor edi,edi 00F3104C nop dword ptr [eax] 00F31050 inc edi 00F31051 add esi,2 00F31054 add edx,3 00F31057 add ecx,eax 00F31059 add edi,eax 00F3105B add esi,eax 00F3105D add edx,eax 00F3105F add eax,4 00F31062 cmp eax,64h 00F31065 jl main+10h (0F31050h) 00F31067 lea eax,[edx+esi] 00F3106A add eax,edi 00F3106C add ecx,eax 00F3106E push ecx 00F3106F push offset string &quot;%d\n&quot; (0F320F8h) 00F31074 call printf (0F31010h) 00F31079 add esp,8 喔，不要看它这么长，其实它是直接算出结果的了，所以已经没有 test 的调用了。这次看用G++生成的反汇编会更清晰一些：不开优化：123456789101112131415161718main:.LFB1022: .cfi_startproc pushq %rbp .cfi_def_cfa_offset 16 .cfi_offset 6, -16 movq %rsp, %rbp .cfi_def_cfa_register 6 movl $100, %edi call _Z4testi movl %eax, %esi movl $.LC0, %edi movl $0, %eax call printf movl $0, %eax popq %rbp .cfi_def_cfa 7, 8 ret 开O2优化：12345678910111213main:.LFB1022: .cfi_startproc subq $8, %rsp .cfi_def_cfa_offset 16 movl $4950, %esi movl $.LC1, %edi xorl %eax, %eax call printf xorl %eax, %eax addq $8, %rsp .cfi_def_cfa_offset 8 ret 看到了吧，这一次的 test 函数，我没有加 inline，在开启编译器优化的情况下，它还是可以自动去优化的。你还会说，那啥，那啥……你还想说什么，自己去验证吧。我可以做最后一个实验。现在把 main.cpp 改成这样：1234567891011121314151617181920212223242526272829303132333435363738// main.cpp#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;inline int test(int i)&#123; int prime[100]; int k = 0; for (int n = 2; n &lt;= i; ++n) &#123; bool is_prime = true; for (int j = 2; j &lt;= static_cast&lt;int&gt;(std::sqrt(n)); ++j) &#123; if (n % j == 0) &#123; is_prime = false; break; &#125; &#125; if (is_prime) &#123; prime[k] = n; ++k; &#125; &#125; int sum = 0; for (int n = 0; n &lt; k; ++n) &#123; sum += prime[n]; &#125; return sum;&#125;int main()&#123; std::printf("%d\n", test(100));&#125; 嗯…是有点儿长，我可是把 test 函数声明为 inline 的！然后在 Debug 下反汇编：12345678 std::printf(&quot;%d\n&quot;, test(100));00131ABE push 64h 00131AC0 call test (013102Dh) 00131AC5 add esp,4 00131AC8 push eax 00131AC9 push offset string &quot;%d\n&quot; (0137B30h) 00131ACE call _printf (0131339h) 00131AD3 add esp,8 在 Release 下反汇编：123456 std::printf(&quot;%d\n&quot;, test(100));00FC1170 call test (0FC1040h) 00FC1175 push eax 00FC1176 push offset string &quot;%d\n&quot; (0FC20F8h) 00FC117B call printf (0FC1010h) 00FC1180 add esp,8 我声明了 inline，可是无论开不开优化，它也不帮我优化了。 八、inline 的真正意义现在你该停下来思考思考了，什么是 inline？是“内联”吗？inline 的意义是什么？发起一个“内联”请求吗？但事实上，你会发现，有时候，你不用 inline，会报错；有时候，你用了 inline，又会报错。你期望使用 inline 可以优化程序效率，但貌似跟你加不加 inline 没有什么关系啊？inline 的意义，似乎与“内联”，已经渐行渐远了。 好好的思考一下。 我们还是继续翻开我们的 cppreference，注意到这里有一段话： The original intent of the inline keyword was to serve as an indicator to the optimizer that inline substitution of a function is preferred over function call, that is, instead of executing the function call CPU instruction to transfer control to the function body, a copy of the function body is executed without generating the call. This avoids overhead created by the function call (copying the arguments and retrieving the result) but it may result in a larger executable as the code for the function has to be repeated multiple times.Since this meaning of the keyword inline is non-binding, compilers are free to use inline substitution for any function that’s not marked inline, and are free to generate function calls to any function marked inline. Those optimization choices do not change the rules regarding multiple definitions and shared statics listed above. 看不懂没关系，其实它就是说：在很久很久以前，inline 作为给编译器优化的提示符，而 inline 的含义是非绑定的，编译器可以自由的选择、决定是否 inline 一个函数。而如今，编译器根本不需要这样的提示，如果它认为一个函数值得 inline，它会自动 inline，否则，即使你 inline 了，它也会拒绝。可以看看这一篇 SO上的回答： It is said that inline hints to the compiler that you think the function should be inlined. That may have been true in 1998, but a decade later the compiler needs no such hints. Not to mention humans are usually wrong when it comes to optimizing code, so most compilers flat out ignore the ‘hint’. static - the variable/function name cannot be used in other compilation units. Linker needs to make sure it doesn’t accidentally use a statically defined variable/function from another compilation unit. extern - use this variable/function name in this compilation unit but don’t complain if it isn’t defined. The linker will sort it out and make sure all the code that tried to use some extern symbol has its address. inline - this function will be defined in multiple compilation units, don’t worry about it. The linker needs to make sure all compilation units use a single instance of the variable/function. 现在你应该差不多能够理解了，现在的编译器，并不需要你用 inline 去提醒，不要小看搞编译器那帮人，想着帮编译器优化的，一般人往往是错误的。所以，Ⅵ. 当且仅当你想用 inline 去优化程序时，不要使用 inline。inline 这个关键字的翻译，就是一个坑，它真正的意义并不是去内联一个函数，而是表示 哥，别怕！无论你看到了多少个定义，但实体就我一个！在这个 cppreference 里，最重要的就是这一句话： Because the meaning of the keyword inline for functions came to mean “multiple definitions are permitted” rather than “inlining is preferred”, that meaning was extended to variables. 翻译过来就是：Ⅶ. inline 的含义更多的是“允许多重定义”而不是“优先选择内联”。 最后希望看完这篇文章的童鞋们，都可以深刻的理解C++的inline。 九、总结 Ⅰ.inline 要跟函数的定义放在一块 Ⅱ. inline 函数的定义放在头文件中，而不放在源文件中 Ⅲ. 当且仅当函数定义在头文件且有可能被多个源文件包含时，使用 inline Ⅳ. 不要把 inline用于类成员函数 Ⅴ. 模板不需要声明为 inline，也具有 inline 的语义 Ⅵ. 当且仅当你想用 inline 去优化程序时，不要使用 inline Ⅶ. inline 的含义更多的是“允许多重定义”而不是“优先选择内联” ※注：以上总结适用于不熟悉、不了解 inline 的同学。若对以上内容都了解，使用 inline 的时候，很明白很清楚在做什么，会发生什么，那就随便怎么用啦！有的时候用了，就是为了好看一点呀！(～￣▽￣)～]]></content>
      <categories>
        <category>C++之那些年踩过的坑</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++之那些年踩过的坑(一)]]></title>
    <url>%2F2017%2F05%2F22%2Fp1705221%2F</url>
    <content type="text"><![CDATA[注：本文来自于我的一篇博客 http://www.cnblogs.com/GodA/p/6501505.html ，修改而成。 这一篇聊聊关于C++中的名称空间（namespace）。 一、避免在全局范围内使用 using namespace xxx注意这个标题中的限定词，避免在全局范围内使用。之前很喜欢写代码开头就写上 using namespace std，因为可以省很多事，比写什么 cout，endl 方便多了。后来我在写 MyTinySTL 这个项目时，最后写测试，为了方便，就用了 using namespace std，写的时候是挺爽的，一运行就炸了。错误长的惨不忍睹，一大堆的名称冲突。当你使用了 using namespace std 的时候，就把 std 这个名称空间内的内容直接引用到了当前空间，如果跟当前空间的函数、类等重名了，那么编译就不通过了，这个就叫名称污染。比如：1234567891011121314151617181920212223#include &lt;iostream&gt;#include &lt;vector&gt;namespace your&#123;template &lt;typename T&gt;class vector&#123;public: vector() = default; ~vector() = default;private: T* data;&#125;;&#125;using namespace std;using namespace your;int main()&#123; vector&lt;int&gt; v;&#125; 你编译它，就会得到类似不明确的符号 vector 啊，may be std::vector or your::vector 啊之类的。当然了，这太明显了，谁都会看出来。问题就在于，我们不能把问题是否发生，寄托于我们是否能够看出来。当代码多了，文件多了，几十个几百个，上万行十万行，你确定你还记得你在哪个头文件 using 了什么东西？然后在一层一层 include 的情况下，莫名其妙的就炸掉了。所以，还是从根源上杜绝问题比较好。 刚刚说的是 namespace std，但对于其它的 namespace 而言，也是一样的。如果是你自己写的，你都尚未能保证你能避开所有重复的命名，除非你自己写个玩具中的 demo，如果是别人写的，那就更加不可控了。 其实解决办法有很多的，或者说是预防措施，又或者说，其实是一个良好的编程习惯。比起直接在全局使用 using namespace xxx 好一点的做法是：在局部声明并且只声明需要的那个部分。比如如果在某个作用域内经常要使用 std::cout，std::endl 等，你可以这样做：12345678910void test()&#123; using std::cout; using std::endl; cout &lt;&lt; "1+1=" &lt;&lt; 1 + 1 &lt;&lt; endl; cout &lt;&lt; "1+2=" &lt;&lt; 1 + 2 &lt;&lt; endl; cout &lt;&lt; "1+3=" &lt;&lt; 1 + 3 &lt;&lt; endl; // ...&#125; 当然最好的还是在你要使用的东西前显示指定出它归属的名称空间，一来可以更清晰的知道它是来自哪里的库，二来这样写几乎放多久都不会有错。习惯成自然，养成了这个习惯，你就根本不会去想到有 using namespace xxx 这种东西了。 二、Best Practices在 C++ Coding Standards 里，有这样一段话： SummaryNamespace usings are for your convenience, not for you to inflict on others: Never write a using declaration or a using directive before an #include directive.Corollary: In header files, don’t write namespace-level using directives or using declarations; instead, explicitly namespace-qualify all names. (The second rule follows from the first, because headers can never know what other header #includes might appear after them.)DiscussionIn short: You can and should use namespace using declarations and directives liberally in your implementation files after #include directives and feel good about it. Despite repeated assertions to the contrary, namespace using declarations and directives are not evil and they do not defeat the purpose of namespaces. Rather, they are what make namespaces usable. 在 C++ Coding Standards for EECS 381中 P32 有一段话： Follow guidelines for namespace using statements. Namespace declarations and directives. No namespace using declarations or directives are allowed at the top level of a header file. OK if scoped within an inline or member function body or a class declaration. In .cpp files, Place using statements only after all #includes. Prefer using declarations of specific Standard Library functions or classes to using namespacedirectives. Especially in this course, prefer using declarations or directives to explicitly qualifying StandardLibrary names with std::. 在 Google C++ Style Guide 中有一条： You may not use a using-directive to make all names from a namespace available. 看了这几段，就胜过我千言万语了。 三、关于匿名 namespace关于 unnamed namespace，cppreference 如是说到： Unnamed namespaces as well as all namespaces declared directly or indirectly within an unnamed namespace have internal linkage, which means that any name that is declared within an unnamed namespace has internal linkage. 也就是说，现在，在匿名空间里的成员，具有内部链接，跟 static 没啥区别了。不过依然要注意，在同一层次中，可以有多个匿名空间，不过这些匿名空间会被整合成一个，所以不能像这样写，会报重定义：12345678910111213#include &lt;iostream&gt;namespace&#123; void foo() &#123; std::cout &lt;&lt; "1" &lt;&lt; "\n"; &#125;&#125;namespace&#123; void foo() &#123; std::cout &lt;&lt; "2" &lt;&lt; "\n"; &#125;&#125;int main()&#123; foo();&#125; 当然在不同空间内的匿名空间，当然就是不同的啦，下面这样就可以通过了： 1234567891011121314151617#include &lt;iostream&gt;namespace&#123; void foo() &#123; std::cout &lt;&lt; "1" &lt;&lt; "\n"; &#125;&#125;namespace n1&#123;namespace&#123; void foo() &#123; std::cout &lt;&lt; "2" &lt;&lt; "\n"; &#125;&#125;&#125;int main()&#123; foo(); n1::foo();&#125; 在 Google C++ Style Guide 中是这样说 unnamed namesapce 的： When definitions in a .cc file do not need to be referenced outside that file, place them in an unnamed namespace or declare them static. Do not use either of these constructs in .h files.DefinitionAll declarations can be given internal linkage by placing them in unnamed namespaces, and functions and variables can be given internal linkage by declaring them static. This means that anything you’re declaring can’t be accessed from another file. If a different file declares something with the same name, then the two entities are completely independent.DecisionUse of internal linkage in .cc files is encouraged for all code that does not need to be referenced elsewhere. Do not use internal linkage in .h files. 他们鼓励在实现文件中，把那些不需要外部引用的东西放进匿名空间中。陈硕大大在他的 CppPractice 中，第一个提到的就是慎用匿名空间。我觉得，对于他说的不利之处，现在来看，主要还是是第一点。因为匿名namespace里的东西是匿名的，所以万一以后有一天想引用它了，也说不准。其实还是用个具体名称，也不麻烦。对于那些实现细节，或者不希望暴露的，我还是喜欢扔进一个 namespace details{} 或者什么 namespace impl {} 里。 四、总结总结就两点： 不要使用 using namespace xxx，使用 xxx::yyy 使用具名 namespace]]></content>
      <categories>
        <category>C++之那些年踩过的坑</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello, my world]]></title>
    <url>%2F2017%2F05%2F17%2Fp1705171%2F</url>
    <content type="text"><![CDATA[前言原本在博客园和Github上有写一些随笔和笔记，不过博客园的编辑真的好难看，还不如 Markdown 格式的好看，所以就搭了一个新的博客，会陆续把一些以前写的搬到这里，以及新随笔和笔记都会在这里首发。 Hello, my world大概每个人接触编程后，写的第一个程序都是 Hello world 。我们能轻松的用几行代码，就在一个黑框框或者更漂亮的界面上输出一个 Hello world，多亏了我们是站在了许多巨人的肩膀上。多希望有一天，我可以在自己创造的世界里，说一声 Hello, my world! 启程以上所说的”自己创造的世界”，其实说的是自己创造自己喜欢的环境，可以是一个系统，可以是一种语言，可以是一个框架，甚至可以是一种语法。只要能让自己用得开心，想怎么改就怎么改，想怎么运行就怎么运行。当然，不可能从零开始，也不可能去重写所有的东西。这一个过程应该是自顶向下的，从能最直接接触到的东西开始，有不顺手的地方，那就给它包装，或者重写，直到自己顺手了，开心了为止。]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
</search>